#!/bin/bash

# バージョン情報
COMPOSE_CD_VER_MAJOR='1'
COMPOSE_CD_VER_MINOR='0'
COMPOSE_CD_VER_PATCH='0'
COMPOSE_CD_VER_PRE=''

# compose 関数
function compose() {
    $COMPOSE_IMPL "$@"
}

# version 関数
function version() {
    local compose_cd_ver
    compose_cd_ver="${COMPOSE_CD_VER_MAJOR}.${COMPOSE_CD_VER_MINOR}.${COMPOSE_CD_VER_PATCH}"
    if [ -n "${COMPOSE_CD_VER_PRE}" ]; then
        compose_cd_ver="${compose_cd_ver}-${COMPOSE_CD_VER_PRE}"
    fi
    echo "${compose_cd_ver}"
}

# usage 関数
function usage() {
    echo "usage> compose-cd [COMMAND]"
    echo "commands:"
    echo "  help        show this usage"
    echo "  install     install compose-cd"
    echo "  uninstall   uninstall compose-cd"
    echo "  status      check status"
    echo "  update      update projects"
    echo "  cleanup     cleanup container images"
    echo "  check       perform daily Docker and API checks"
}

# Slack通知用関数
function notify_slack() {
    local webhook
    local msg
    local username
    webhook="$1"
    msg="$2"
    username="$3"
    curl --silent -H "Accept: application/json" -H "Content-type: application/json" -X POST \
        -d '{"username":"'"${username}"'","text":'"\"$msg\"}" "$webhook"
}

# 通知関数
function notify() {
    local msg
    local username
    if [ -z ${2+x} ]; then
        if [ -z "${project}" ]; then
            msg="$1"
        else
            msg="[${project}] $1"
        fi
    else
        msg="$2$1"
    fi
    echo "$msg"
    username="compose-cd"
    if [ -n "${NOTIFY_USERNAME+x}" ]; then
        username="${NOTIFY_USERNAME}"
    fi
    if [ -n "${SLACK_WEBHOOK+x}" ]; then
        notify_slack "${SLACK_WEBHOOK}" "$msg" "$username"
    fi
}

# テスト通知関数
function notify_test() {
    notify "test"
}

# ログ出力関数
function compose_log() {
    local log_level
    local msg
    log_level="$1"
    shift
    msg=$(echo "$@")
    case $log_level in
        "echo")
            echo "$@"
            ;;
        "notify")
            notify "$msg"
            ;;
    esac
}

# グローバル設定読み込み関数
function load_global_config() {
    if [ ! -e "/etc/compose-cd/config" ]; then
        echo "/etc/compose-cd/config not found"
        exit 1
    fi
    source /etc/compose-cd/config
    if [ "${COMPOSE_CD_VER_MAJOR}" != "${VER_MAJOR}" ]; then
        compose_log notify "[warn] major version mismatch!!!: ${COMPOSE_CD_VER_MAJOR} != ${VER_MAJOR}"
    fi
    if [ "${COMPOSE_CD_VER_MINOR}" != "${VER_MINOR}" ]; then
        compose_log notify "[warn] minor version mismatch!!!: ${COMPOSE_CD_VER_MINOR} != ${VER_MINOR}"
    fi
    if [ -z ${COMPOSE_IMPL+x} ]; then
        COMPOSE_IMPL="docker compose"
    fi
}

# プロジェクト設定読み込み関数
function load_config() {
    local ret
    ret=0
    compose_log echo -n "[$proj:load config] "
    if [ ! -e ./.compose-cd ]; then
        compose_log echo "config file not found"
        return
    fi
    source ./.compose-cd
    if [ -z ${UPDATE_REPO_ONLY+x} ]; then UPDATE_REPO_ONLY=false; fi
    if [ -v RESTRICT_HOSTNAME_PATTERN ]; then
        if ! expr "$(hostname)" : "${RESTRICT_HOSTNAME_PATTERN}" >/dev/null; then
            ret=1
        fi
    fi
    compose_log echo "ok"
    return $ret
}

# サービス起動関数
function service_up() {
    compose_log notify "starting service..."
    if ! "$RESTART_WITH_BUILD"; then
        compose up -d 2>/dev/null
    else
        compose_log notify "start build..."
        compose up -d --build 2>/dev/null
        compose_log notify "finish build"
    fi
    compose_log notify "service is up!"
}

# サービス停止関数
function service_down() {
    compose down 2>/dev/null
    compose_log notify "service is down"
}

# git 関数
function git() {
    sudo -u "$GIT_PULL_USER" git "$@"
}

# リポジトリ更新関数
function update_repo() {
    local branch
    local local_commit
    local remote_commit
    local apply_list
    local apply_list_expand
    local is_restart
    local git_remote
    git_remote="${REPO_GIT_REMOTE}"
    compose_log echo -n "[$project:update repository] "
    branch=$(git symbolic-ref --short HEAD)
    local_commit=$(git rev-parse HEAD)
    remote_commit=$(git ls-remote "${git_remote}" "${branch}" | awk '{print $1}')
    if [ -z "$remote_commit" ]; then
        compose_log notify "error: could not get remote commit"
        compose_log echo "branch: ${branch}"
        return 2
    fi
    if [[ $local_commit = "$remote_commit" ]]; then
        compose_log echo "pass"
        return 1
    fi
    compose_log echo "pull start"
    local local_commit_link
    local remote_commit_link
    local_commit_link="[$local_commit]($(git remote get-url "${git_remote}")/commit/${local_commit})"
    remote_commit_link="[$remote_commit]($(git remote get-url "${git_remote}")/commit/${remote_commit})"
    compose_log notify "local(${local_commit_link}) -> remote(${remote_commit_link})"
    git pull "${git_remote}" "$branch"
    if [ ! -e .compose-apply ]; then
        is_restart=true
    else
        apply_list=".compose-cd
$(cat .compose-apply)"
        apply_list_expand=""
        for a in $apply_list; do
            local expand
            expand=$(find "$a" 2>/dev/null)
            apply_list_expand="${apply_list_expand}
    ${expand}"
        done
        is_restart=false
        set -f
        for a in $apply_list_expand; do
            if echo "$a" | grep -q '\*'; then
                compose_log notify "error: remain wildcard"
                return 2
            fi
            a="$(git rev-parse --show-prefix)${a}"
            if git diff --name-only "${local_commit}" | grep "^${a}$"; then
                is_restart=true
                compose_log notify "apply: $a"
                continue
            fi
        done
    fi
    if ! $is_restart; then
        compose_log notify "skip restart: no relevant changes detected"
        return 1
    fi
}

# プロジェクト更新関数
function project_update() {
    local proj=$1
    local rc
    local rr
    local before_script
    local after_script
    load_config
    rc=$?
    if [ $rc = 1 ]; then
        compose_log echo "skip update"
        return
    fi
    rr=1
    if ! $UPDATE_REPO_ONLY; then
        update_repo
        rr=$?
    fi
    if [ $rr = 1 ]; then
        compose_log echo "no update"
        return
    fi
    if [ $rr = 2 ]; then
        return
    fi
    if [ -z ${BEFORE_RESTART+x} ]; then
        before_script=""
    else
        before_script=${BEFORE_RESTART}
    fi
    if [ -z ${AFTER_RESTART+x} ]; then
        after_script=""
    else
        after_script=${AFTER_RESTART}
    fi
    if [ -n "${before_script}" ]; then
        if ! bash -c "${before_script}"; then
            compose_log notify "skip restart: before script exit with $?"
            return
        fi
    fi
    compose_log echo "restart service..."
    service_down
    service_up
    if [ -n "${after_script}" ]; then
        bash -c "${after_script}"
    fi
}

# プロジェクトステータス確認関数
function project_status() {
    local proj
    local services
    proj=$1
    compose_log echo -n "[$proj:status] "
    services=$(compose ps -q)
    if [ -n "$services" ]; then
        compose_log echo "up"
    else
        compose_log echo "down"
    fi
}

# 各プロジェクトに対して指定された関数を実行
function foreach_project() {
    local search_root
    local cfgs
    if [ -z ${SEARCH_ROOT+x} ]; then
        compose_log echo "error: SEARCH_ROOT is not set"
        return
    fi
    search_root=${SEARCH_ROOT}
    (
        cd "${search_root}" || {
            compose_log echo "error: SEARCH_ROOT(${search_root}) not found"
            exit 1
        }
        if [ -e compose-cd.lock ]; then
            compose_log echo "warn: lock file exists"
            exit 0
        fi
        touch compose-cd.lock
        cfgs=$(find . -maxdepth 5 -type f -name '.compose-cd')
        for c in $cfgs; do
            local proj
            proj=$(dirname "$c")
            project=$proj
            (
                cd "$proj" || {
                    compose_log echo "[$proj] error: project not found"
                    exit 1
                }
                eval "$1 $proj"
            )
        done
        rm compose-cd.lock
    )
}

# サービスとAPIのチェックを実行し通知
function check_services_and_notify() {
    compose_log echo "Running daily Docker and API check..."
    local all_containers_up=true
    local containers_status
    local slack_message
    containers_status=$(docker ps --format "{{.Names}}: {{.Status}}")
    echo "Docker Containers Status:"
    echo "$containers_status"
    while IFS= read -r line; do
        if [[ ! "$line" =~ Up ]]; then
            all_containers_up=false
            slack_message+=":warning: コンテナ *${line%%:*}* が起動していません。\n"
        fi
    done <<< "$containers_status"
    if $all_containers_up; then
        slack_message+=":white_check_mark: 全てのDockerコンテナが正常に起動しています。\n"
    fi
    local api_url="https://elpis-m1.kajilab.dev/"
    local api_response
    api_response=$(curl --silent --fail "$api_url")
    if [ $? -ne 0 ]; then
        slack_message+=":x: APIエンドポイント *${api_url}* へのアクセスに失敗しました。\n"
    else
        if ! command -v jq >/dev/null 2>&1; then
            compose_log notify "error: jq is not installed. Please install jq to parse JSON responses."
            return 1
        fi
        local status
        local database
        local timestamp
        status=$(echo "$api_response" | jq -r '.status')
        database=$(echo "$api_response" | jq -r '.database')
        timestamp=$(echo "$api_response" | jq -r '.timestamp')
        if [ "$status" == "ok" ] && [ "$database" == "reachable" ]; then
            slack_message+=":white_check_mark: APIステータス: *${status}*\n:database: データベース: *${database}*\n:clock1: タイムスタンプ: *${timestamp}*\n"
        else
            slack_message+=":warning: APIステータスに異常があります。\nレスポンス: \`${api_response}\`\n"
        fi
    fi
    notify "$slack_message"
    compose_log echo "Daily check completed."
}

# インストール関数
function install() {
    echo "install"
    local search_root
    local git_pull_user
    local slack_webhook
    local options
    if ! options=$(getopt --options "s:g:d:" --longoptions "search-root:,git-pull-user:,slack-webhook:" -- "$@"); then
        echo "Incorrect options provided"
        exit 1
    fi
    eval set -- "$options"
    while true; do
        case $1 in
            --search-root | -s)
                shift
                search_root="$1"
                ;;
            --git-pull-user | -g)
                shift
                git_pull_user="$1"
                ;;
            --slack-webhook | -d)
                shift
                slack_webhook="$1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done
    if [ -z ${search_root+x} ]; then read -rp "search root> " search_root; fi
    if [ -z ${git_pull_user+x} ]; then read -rp "git pull user> " git_pull_user; fi
    if [ -z ${slack_webhook+x} ]; then read -rp "Slack webhook URL> " slack_webhook; fi
    mkdir -p /etc/compose-cd
    tee /etc/compose-cd/config <<EOS
VER_MAJOR="${COMPOSE_CD_VER_MAJOR}"
VER_MINOR="${COMPOSE_CD_VER_MINOR}"
VER_PATCH="${COMPOSE_CD_VER_PATCH}"
VER_PRE="${COMPOSE_CD_VER_PRE}"

SEARCH_ROOT="${search_root}"

GIT_PULL_USER="${git_pull_user}"

SLACK_WEBHOOK="${slack_webhook}"
REPO_GIT_REMOTE="origin"

EOS
    load_global_config
    compose_log notify "notify test" "[test] "
    cp ./compose-cd /usr/bin/compose-cd
    cp ./compose-cd.service /etc/systemd/system/
    cp ./compose-cd.timer /etc/systemd/system/
    cp ./compose-cd-cleanup.service /etc/systemd/system/
    cp ./compose-cd-cleanup.timer /etc/systemd/system/
    if ! command -v jq >/dev/null 2>&1; then
        echo "jqがインストールされていません。インストールを開始します。"
        sudo apt-get update
        sudo apt-get install -y jq
    fi
    systemctl daemon-reload
    systemctl enable --now compose-cd.service
    systemctl enable --now compose-cd.timer
    systemctl enable --now compose-cd-cleanup.timer
    compose_log echo "Running initial update..."
    /usr/bin/compose-cd update
    echo "Setting up daily check service and timer..."
    tee /etc/systemd/system/compose-cd-check.service <<EOS
[Unit]
Description=Compose-CD Daily Check Service

[Service]
Type=oneshot
ExecStart=/usr/bin/compose-cd check
EOS
    tee /etc/systemd/system/compose-cd-check.timer <<EOS
[Unit]
Description=Run Compose-CD Daily Check every day at 2:00 AM

[Timer]
OnCalendar=*-*-* 02:00:00
Persistent=true

[Install]
WantedBy=timers.target
EOS
    systemctl daemon-reload
    systemctl enable --now compose-cd-check.timer
    compose_log echo "Daily check service and timer have been set up."
}

# アンインストール関数
function uninstall() {
    echo "uninstall"
    systemctl stop compose-cd.timer
    systemctl stop compose-cd.service
    systemctl stop compose-cd-cleanup.timer
    systemctl stop compose-cd-cleanup.service
    systemctl stop compose-cd-check.timer
    systemctl stop compose-cd-check.service
    systemctl disable compose-cd-check.timer
    systemctl disable compose-cd-check.service
    rm /etc/systemd/system/compose-cd-check.timer
    rm /etc/systemd/system/compose-cd-check.service
    rm /usr/bin/compose-cd
    rm -r /etc/compose-cd
    rm /etc/systemd/system/compose-cd.timer
    rm /etc/systemd/system/compose-cd.service
    rm /etc/systemd/system/compose-cd-cleanup.timer
    rm /etc/systemd/system/compose-cd-cleanup.service
    systemctl daemon-reload
}

# ステータス確認関数
function check_status() {
    compose_log echo "check status"
    load_global_config
    foreach_project project_status
}

# 更新関数
function update() {
    compose_log echo "update"
    load_global_config
    foreach_project project_update
}

# クリーンアップ関数
function cleanup() {
    compose_log echo "cleanup: container images"
    docker image prune -a -f
}

# メインの処理
case $1 in
    "help") usage ;;
    "version") version ;;
    "notify-test") notify "test" ;;
    "install")
        shift
        install "$@"
        ;;
    "uninstall") uninstall ;;
    "status") check_status ;;
    "update") update ;;
    "cleanup") cleanup ;;
    "check") check_services_and_notify ;;
    *) usage ;;
esac
